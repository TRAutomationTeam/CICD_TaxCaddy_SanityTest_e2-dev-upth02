name: Development workflow

on:
  push:
    branches:
      - main
    paths:
      - 'Configue-CICD.txt'

env: 
  PROJECT_FOLDER: ${{ github.action_path }}
  ORCH_URL: ${{ secrets.UIPATH_ORCH_URL }}
  ORCH_TENANT: ${{ secrets.UIPATH_TENANT_ID }}
  ORCH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
  ORCH_APP_ID: ${{ secrets.UIPATH_APP_ID }}
  ORCH_APP_SECRET: ${{ secrets.UIPATH_APP_SECRET }}
  ORCH_APP_SCOPE: ${{ secrets.UIPATH_APP_SCOPE }}
  ORCH_ACC_NAME: ${{ secrets.UIPATH_ACCOUNT_NAME }}

jobs:
  print-details:
    runs-on: self-hosted
    steps:
      - name: echo-default-env-variables
        run: |
          Write-Host "Home: $env:HOME"
          Write-Host "GITHUB_WORKFLOW: $env:GITHUB_WORKFLOW"
          Write-Host "GITHUB_ACTIONS: $env:GITHUB_ACTIONS"
          Write-Host "GITHUB_ACTOR: $env:GITHUB_ACTOR"
          Write-Host "GITHUB_REPOSITORY: $env:GITHUB_REPOSITORY"
          Write-Host "GITHUB_EVENT_NAME: $env:GITHUB_EVENT_NAME"
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "GITHUB_SHA: $env:GITHUB_SHA"
          Write-Host "GITHUB_REF: $env:GITHUB_REF"

  cleaner:
    runs-on: self-hosted
    needs: [print-details]
    steps:
      - name: Enhanced workspace cleanup for self-hosted runner
        shell: pwsh
        run: |
          Write-Host "Enhanced workspace cleanup for self-hosted runner"
          $workspacePath = "${{ github.workspace }}"
          Write-Host "Workspace path: $workspacePath"
          
          if (Test-Path $workspacePath) {
            try {
              Get-ChildItem -Path $workspacePath -Recurse -Force | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
              Write-Host "✅ Workspace cleanup completed"
            }
            catch {
              Write-Host "⚠️ Workspace cleanup had issues: $($_.Exception.Message)"
            }
          }
          
          if (-not (Test-Path $workspacePath)) {
            New-Item -Path $workspacePath -ItemType Directory -Force | Out-Null
            Write-Host "✓ Created fresh workspace directory"
          }

  config:
    runs-on: self-hosted
    needs: [cleaner]
    outputs:
      build: ${{ steps.get_build.outputs.build }}
      run: ${{ steps.get_run.outputs.run }}
      environment: ${{ steps.get_environment.outputs.environment }}
      project_name: ${{ steps.get_project_name.outputs.project_name }}
      robot: ${{ steps.get_robot.outputs.robot }}
      machine: ${{ steps.get_machine.outputs.machine }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          set-safe-directory: true
          lfs: false
      
      - name: Verify config file exists
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          Write-Host "Checking for config file at: $configFile"
          
          if (Test-Path $configFile) {
            Write-Host "✅ Config file found!"
            Write-Host "Config file contents:"
            Get-Content $configFile | ForEach-Object { Write-Host "  '$_'" }
          } else {
            Write-Host "❌ Config file NOT found!"
            Write-Host "Available files:"
            Get-ChildItem -Path "${{ github.workspace }}" -Recurse -File | ForEach-Object { 
              Write-Host "  $($_.FullName)" 
            }
            exit 1
          }
      
      - name: Get BUILD value from Configure-CICD.txt
        id: get_build
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $build = (Get-Content $configFile | Where-Object { $_ -match '^BUILD[ ]*-[ ]*(.+)$' }) -replace '^BUILD[ ]*-[ ]*',''
          $build = $build.Trim()
          
          # Normalize Yes/No to true/false
          if ($build -eq "Yes") { $build = "true" }
          if ($build -eq "No") { $build = "false" }
          
          Write-Host "BUILD value: '$build'"
          echo "build=$build" >> $env:GITHUB_OUTPUT
      
      - name: Get RUN value from Configure-CICD.txt
        id: get_run
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $run = (Get-Content $configFile | Where-Object { $_ -match '^RUN[ ]*-[ ]*(.+)$' }) -replace '^RUN[ ]*-[ ]*',''
          $run = $run.Trim()
          
          # Normalize Yes/No to true/false
          if ($run -eq "Yes") { $run = "true" }
          if ($run -eq "No") { $run = "false" }
          
          Write-Host "RUN value: '$run'"
          echo "run=$run" >> $env:GITHUB_OUTPUT
      
      - name: Get ENVIRONMENT value from Configure-CICD.txt
        id: get_environment
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $envValue = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*ENVIRONMENT[ ]*-[ ]*(.+)$' }) -replace '^[ ]*ENVIRONMENT[ ]*-[ ]*',''
          $envValue = $envValue.Trim()
          Write-Host "ENVIRONMENT value: '$envValue'"
          echo "environment=$envValue" >> $env:GITHUB_OUTPUT
      
      - name: Get PROJECT_NAME value from Configure-CICD.txt
        id: get_project_name
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $projectName = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*PROJECT_NAME[ ]*-[ ]*(.+)$' }) -replace '^[ ]*PROJECT_NAME[ ]*-[ ]*',''
          $projectName = $projectName.Trim()
          Write-Host "PROJECT_NAME value: '$projectName'"
          echo "project_name=$projectName" >> $env:GITHUB_OUTPUT

      - name: Get ROBOT value from Configure-CICD.txt
        id: get_robot
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $robot = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*ROBOT[ ]*-[ ]*(.+)$' }) -replace '^[ ]*ROBOT[ ]*-[ ]*',''
          $robot = $robot.Trim()
          Write-Host "ROBOT value: '$robot'"
          echo "robot=$robot" >> $env:GITHUB_OUTPUT

      - name: Get MACHINE value from Configure-CICD.txt
        id: get_machine
        shell: pwsh
        run: |
          $configFile = "${{ github.workspace }}/Configue-CICD.txt"
          $machine = (Get-Content $configFile | Where-Object { $_ -match '^[ ]*MACHINE[ ]*-[ ]*(.+)$' }) -replace '^[ ]*MACHINE[ ]*-[ ]*',''
          $machine = $machine.Trim()
          Write-Host "MACHINE value: '$machine'"
          echo "machine=$machine" >> $env:GITHUB_OUTPUT

  debug:
    runs-on: self-hosted
    needs: [config]
    if: always()
    steps:
      - name: Debug config outputs
        shell: pwsh
        run: |
          Write-Host "=== CONFIG DEBUG ==="
          Write-Host "config.result: '${{ needs.config.result }}'"
          Write-Host "config.outputs.run: '${{ needs.config.outputs.run }}'"
          Write-Host "config.outputs.build: '${{ needs.config.outputs.build }}'"
          Write-Host "config.outputs.environment: '${{ needs.config.outputs.environment }}'"
          Write-Host "config.outputs.project_name: '${{ needs.config.outputs.project_name }}'"
          Write-Host "config.outputs.robot: '${{ needs.config.outputs.robot }}'"
          Write-Host "config.outputs.machine: '${{ needs.config.outputs.machine }}'"
          Write-Host "===================="
          
          Write-Host "=== CONDITION EVALUATION ==="
          $configSuccess = '${{ needs.config.result }}' -eq 'success'
          $runTrue = '${{ needs.config.outputs.run }}' -eq 'true'
          Write-Host "config.result == 'success': $configSuccess"
          Write-Host "config.outputs.run == 'true': $runTrue"
          Write-Host "Combined condition result: $($configSuccess -and $runTrue)"
          Write-Host "=========================="

  run:
    runs-on: self-hosted
    needs: [config]
    if: needs.config.result == 'success' && needs.config.outputs.run == 'true'
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true
          force: true
          set-safe-directory: true
          lfs: false
      
      - name: Debug External Application Authentication Values
        shell: pwsh
        run: |
          Write-Host "Starting UiPath job run with External Application authentication"
          Write-Host "PROJECT_NAME from config: ${{ needs.config.outputs.project_name }}"
          Write-Host "ROBOT from config: ${{ needs.config.outputs.robot }}"
          Write-Host "MACHINE from config: ${{ needs.config.outputs.machine }}"
          Write-Host "=== DEBUG: External Application Authentication Values ==="
          Write-Host "ORCH_URL: $env:ORCH_URL"
          Write-Host "ORCH_TENANT: $env:ORCH_TENANT"
          Write-Host "ORCH_ACC_NAME: $env:ORCH_ACC_NAME"
          if ($env:ORCH_APP_ID) {
            Write-Host "ORCH_APP_ID: $($env:ORCH_APP_ID.Substring(0,8))***"
          }
          if ($env:ORCH_APP_SECRET) {
            Write-Host "ORCH_APP_SECRET: SET (length: $($env:ORCH_APP_SECRET.Length) characters)"
          }
          Write-Host "ORCH_APP_SCOPE: $env:ORCH_APP_SCOPE"
          Write-Host "================================================"
      
      - name: Run UiPath Job via API
        shell: pwsh
        run: |
          Write-Host "Job run parameters:"
          Write-Host "  Process Name: ${{ needs.config.outputs.project_name }}"
          Write-Host "  Orchestrator URL: $env:ORCH_URL"
          Write-Host "  Tenant: $env:ORCH_TENANT"
          Write-Host "  Account Name: $env:ORCH_ACC_NAME"
          Write-Host "  Folder: Automation"
          Write-Host "  Machine: ${{ needs.config.outputs.machine }}"
          Write-Host "  Robot: ${{ needs.config.outputs.robot }}"
          Write-Host "  Timeout: 15000"
          
          $scriptPath = "${{ github.workspace }}\scripts\UiPathJobRun.ps1"
          
          if (-not (Test-Path $scriptPath)) {
            Write-Host "❌ UiPathJobRun.ps1 script not found at: $scriptPath" -ForegroundColor Red
            Write-Host "Available files in scripts directory:"
            Get-ChildItem "${{ github.workspace }}\scripts" -ErrorAction SilentlyContinue | ForEach-Object { 
              Write-Host "  - $($_.Name)"
            }
            exit 1
          }
          
          try {
            Write-Host "🚀 Executing UiPath job run script..."
            
            & $scriptPath `
              -processName "${{ needs.config.outputs.project_name }}" `
              -uriOrch "$env:ORCH_URL" `
              -tenantlName "$env:ORCH_TENANT" `
              -accountForApp "$env:ORCH_ACC_NAME" `
              -applicationId "$env:ORCH_APP_ID" `
              -applicationSecret "$env:ORCH_APP_SECRET" `
              -applicationScope "$env:ORCH_APP_SCOPE" `
              -folder_organization_unit "Automation" `
              -robots "${{ needs.config.outputs.robot }}" `
              -machine "${{ needs.config.outputs.machine }}" `
              -timeout "15000" `
              -wait "false" `
              -fail_when_job_fails "true"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ UiPath job completed successfully!" -ForegroundColor Green
            } else {
              Write-Host "❌ UiPath job failed with exit code: $LASTEXITCODE" -ForegroundColor Red
              exit $LASTEXITCODE
            }
          }
          catch {
            Write-Host "❌ Error executing UiPath job: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

  summary:
    runs-on: self-hosted
    needs: [config, debug, run]
    if: always()
    steps:
      - name: Workflow Summary
        shell: pwsh
        run: |
          Write-Host "📊 WORKFLOW EXECUTION SUMMARY"
          Write-Host "================================"
          Write-Host "Job Results:"
          Write-Host "  - Config: ${{ needs.config.result }}"
          Write-Host "  - Debug: ${{ needs.debug.result }}"
          Write-Host "  - Run: ${{ needs.run.result }}"
          Write-Host ""
          
          if ("${{ needs.run.result }}" -eq "success") {
            Write-Host "🎉 WORKFLOW COMPLETED SUCCESSFULLY!" -ForegroundColor Green
          } elseif ("${{ needs.run.result }}" -eq "skipped") {
            Write-Host "⚠️ RUN JOB WAS SKIPPED!" -ForegroundColor Yellow
            Write-Host "Check the debug job output above to see why."
          } else {
            Write-Host "❌ WORKFLOW COMPLETED WITH ERRORS!" -ForegroundColor Red
          }
